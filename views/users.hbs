{{#> layout}}

<div class="page-body">
  <div class="col-sm-12">
    <div class="card">
      <div class="card-header d-flex justify-content-between align-items-center">
        <h5>Users Data</h5>
        <button class="btn btn-primary px-3 py-2" id="createUserButton">
          Create User
        </button>
      </div>
      <div class="table-responsive">
        <table class="table" id="userTable">
          <thead>
            <tr>
              <th scope="col">#</th>
              <th scope="col">Full Name</th>
              <th scope="col">Email</th>
              <th scope="col">Phone Number</th>
              <th scope="col">Phone Number Verified</th>
              <th scope="col">profile photo</th>
              <th scope="col">Actions</th>
            </tr>
          </thead>
          <tbody>
            <!-- سيتم ملء الجدول ديناميكيًا -->
          </tbody>
        </table>
      </div>

    </div>
    <!-- Pagination Controls -->
    <div id="paginationControls" class="d-flex justify-content-center mt-3"></div>
  </div>
</div>
</div>
<!-- نافذة إنشاء مستخدم جديد -->
<div class="modal fade" id="createUserModal" tabindex="-1" aria-labelledby="createUserModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="createUserModalLabel">Create New User</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="createUserForm" enctype="multipart/form-data">
          <div class="mb-3">
            <label for="newUserFullName" class="form-label">Full Name</label>
            <input type="text" id="newUserFullName" class="form-control" placeholder="Enter full name" required>
          </div>
          <div class="mb-3">
            <label for="newUserEmail" class="form-label">Email</label>
            <input type="email" id="newUserEmail" class="form-control" placeholder="Enter email" required>
          </div>
          <div class="mb-3">
            <label for="newUserPhoneNumber" class="form-label">Phone Number</label>
            <input type="text" id="newUserPhoneNumber" class="form-control" placeholder="Enter phone number" required>
          </div>
          <div class="mb-3">
            <label for="newUserPassword" class="form-label">Password</label>
            <input type="password" id="newUserPassword" class="form-control" placeholder="Enter password" required>
          </div>
          <div class="mb-3">
            <label for="newUserProfilePhoto" class="form-label">Profile Photo</label>

            <input type="file" id="newUserProfilePhoto" class="form-control" accept="image/*">
          </div>
          <button type="button" id="saveNewUserButton" class="btn btn-primary">Save</button>
        </form>
      </div>
    </div>
  </div>
</div>

<script>
  function showToast(message, type) {
    const toastContainer = document.createElement('div');
    toastContainer.className = `toast-message ${type}`;
    toastContainer.textContent = message;
    document.body.appendChild(toastContainer);
    setTimeout(() => {
      toastContainer.classList.add('fade-out');
      setTimeout(() => {
        toastContainer.remove();
      }, 500);
    }, 3000);
  }

  document.addEventListener('DOMContentLoaded', async () => {
    const userTableBody = document.querySelector('#userTable tbody');
    const createUserButton = document.getElementById('createUserButton');
    const saveNewUserButton = document.getElementById('saveNewUserButton');
    const createUserModal = new bootstrap.Modal(document.getElementById('createUserModal'));

    createUserButton.addEventListener('click', () => {
      createUserModal.show();
     });

    // Create new user 
    saveNewUserButton.addEventListener('click', async () => {
      const fullName = document.getElementById('newUserFullName').value.trim();
      const email = document.getElementById('newUserEmail').value.trim();
      const phoneNumber = document.getElementById('newUserPhoneNumber').value.trim();
      const password = document.getElementById('newUserPassword').value.trim();
      const profilePhoto = document.getElementById('newUserProfilePhoto').files[0];

      if (!fullName || !email || !password) {
        showToast('Please fill all required fields.', 'failure');
        return;
      }

      const formData = new FormData();
      formData.append('full_name', fullName);
      formData.append('email', email);
      formData.append('phone_number', phoneNumber);
      formData.append('password', password);

      if (profilePhoto) formData.append('profile_photo', profilePhoto);

      try {
        const response = await fetch('http://localhost:3000/api/v1/auth/register', {
          method: 'POST',
          body: formData,
        });

        if (response.ok) {
          showToast('User created successfully!', 'success');
          createUserModal.hide();
          location.reload();
        } else {
          const errorData = await response.json();
          showToast(errorData.message || 'Failed to create user.', 'failure');
        }
      } catch (error) {
        console.error('Error creating user:', error);
        showToast('An error occurred while creating the user.', 'failure');
      }
    });
    const paginationControls = document.getElementById('paginationControls');

    let currentPage = new URLSearchParams(window.location.search).get('page') || 1;
    currentPage = parseInt(currentPage);
    const limit = 10;

    async function fetchUsers(page) {
      try {
        const response = await fetch(`http://localhost:3000/api/v1/admin/users?page=${page}&limit=${limit}`, {
          method: 'GET',
        });

        if (!response.ok) {
          const errorData = await response.json();
          showToast(errorData.message || 'Failed to fetch user data.', 'failure');
          return;
        }

        const users = await response.json();
        const user_data = users.data.users;
        const total_count = users.data.total_count;
        const numberOfPages = users.data.numberOfPages;

        if (!user_data.length) {
          userTableBody.innerHTML = `<tr><td colspan="6" class="text-center">No users found.</td></tr>`;
          return;
        }

        userTableBody.innerHTML = '';
        let cnt = (page - 1) * limit + 1;

        user_data.forEach((user) => {
          const row = `
            <tr>
              <td>${cnt++}</td>
              <td>${user.full_name}</td>
              <td>${user.email}</td>
              <td>${user.phone_number || 'N/A'}</td>
              <td>${user.is_verified === true ? 'Yes' : 'No'}</td>
              <td><img src="/assets/images/logo/logo.png" alt="Profile Photo" style="width: 100px;"></td>
              <td>
                <button class="btn px-4" style="background-color: #006A4E; color: white;" data-id="${user.id}" onclick="editUser(this)">
                  Edit
                </button>
               <button class="btn btn-danger px-3" data-id="${user.id}" onclick="deleteUser(this)">
                  Delete
                </button>
              </td>
            </tr>
          `;
          userTableBody.insertAdjacentHTML('beforeend', row);
        });

        updatePaginationControls(currentPage, numberOfPages);

      } catch (error) {
        console.error('Error fetching users:', error);
        showToast('An error occurred while fetching users.', 'failure');
      }
    }

    function updatePaginationControls(currentPage, numberOfPages) {
      paginationControls.innerHTML = '';

      if (currentPage > 1) {
        const prevButton = document.createElement('button');
        prevButton.innerHTML = '<i class="fas fa-chevron-left"></i>';
        prevButton.className = 'btn pagination-btn';
        prevButton.onclick = () => {
          currentPage--;
          updateURL(currentPage);
          fetchUsers(currentPage);
        };
        paginationControls.appendChild(prevButton);
      }

      for (let i = 1; i <= numberOfPages; i++) {
        const pageButton = document.createElement('button');
        pageButton.textContent = i;
        pageButton.className = `btn pagination-btn ${i === currentPage ? 'active-page' : ''}`;
        pageButton.onclick = () => {
          currentPage = i;
          updateURL(currentPage);
          fetchUsers(currentPage);
        };
        paginationControls.appendChild(pageButton);
      }

      if (currentPage < numberOfPages) {
        const nextButton = document.createElement('button');
        nextButton.innerHTML = '<i class="fas fa-chevron-right"></i>';
        nextButton.className = 'btn pagination-btn';
        nextButton.onclick = () => {
          currentPage++;
          updateURL(currentPage);
          fetchUsers(currentPage);
        };
        paginationControls.appendChild(nextButton);
      }

    }

    function updateURL(page) {
      const url = new URL(window.location);
      url.searchParams.set('page', page);
      window.history.pushState({}, '', url);
      location.reload();
    }

    fetchUsers(currentPage);

    window.editUser = async function (button) {
      const userId = button.getAttribute('data-id');
      window.location.href = `update-user?id=${userId}`;
    };

    window.deleteUser = async function (button) {
      const userId = button.getAttribute('data-id');

      const isConfirmed = await showConfirmToast('Are you sure you want to delete this user?');
      if (!isConfirmed) return;

      try {
        const response = await fetch(`http://localhost:3000/api/v1/admin/users/${userId}`, {
          method: 'DELETE',
        });

        if (response.ok) {
          showToast('User deleted successfully!', 'success');
          setTimeout(() => {
            fetchUsers(currentPage);
          }, 500);
        } else {
          const errorData = await response.json();
          showToast(errorData.message || 'Failed to delete user.', 'failure');
        }
      } catch (error) {
        console.error('Error deleting user:', error);
        const message = error.message || 'An error occurred while deleting the user.';
        showToast(message, 'failure');
      }
    };
  });
</script>

<style>
  .pagination-btn {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    margin: 0 5px;
    border: 1px solid #ddd;
    background-color: #fff;
    color: #006A4E;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
  }

  .pagination-btn:hover {
    background-color: #006A4E;
    color: #fff;
    border-color: #006A4E;
    transform: scale(1.1);
  }

  .active-page {
    background-color: #006A4E !important;
    color: #fff !important;
    border-color: #006A4E !important;
  }

  .pagination-btn i {
    font-size: 14px;
  }
</style>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

{{/layout}}